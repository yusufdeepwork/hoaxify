{"ast":null,"code":"var _jsxFileName = \"/home/yusuf/frontend/src/shared/ApiProgress.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function withApiProgress(WrappedComponent, apiPath) {\n  var _class, _temp;\n\n  return _temp = _class = class extends Component {\n    constructor(...args) {\n      super(...args);\n      this.state = {\n        pendingApiCall: false\n      };\n\n      this.updateApiCallFor = (url, inProgress) => {\n        if (url === apiPath) {\n          this.setState({\n            pendingApiCall: inProgress\n          });\n        }\n      };\n    }\n\n    componentDidMount() {\n      this.requestInterceptor = axios.interceptors.request.use(request => {\n        this.updateApiCallFor(request.url, true);\n        return request;\n      });\n      this.responseInterceptor = axios.interceptors.response.use(response => {\n        this.updateApiCallFor(response.config.url, false);\n        return response;\n      }, error => {\n        this.updateApiCallFor(error.config.url, false);\n        throw error;\n      });\n    }\n\n    componentWillUnmount() {\n      axios.interceptors.request.eject(this.requestInterceptor);\n      axios.interceptors.response.eject(this.responseInterceptor);\n    }\n\n    render() {\n      const {\n        pendingApiCall\n      } = this.state;\n      return /*#__PURE__*/React.createElement(WrappedComponent, Object.assign({\n        pendingApiCall: pendingApiCall\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 16\n        }\n      }));\n    }\n\n  }, _class.displayName = `ApiProgress(${getDisplayName(WrappedComponent)})`, _temp;\n}","map":{"version":3,"sources":["/home/yusuf/frontend/src/shared/ApiProgress.js"],"names":["React","Component","axios","getDisplayName","WrappedComponent","displayName","name","withApiProgress","apiPath","state","pendingApiCall","updateApiCallFor","url","inProgress","setState","componentDidMount","requestInterceptor","interceptors","request","use","responseInterceptor","response","config","error","componentWillUnmount","eject","render","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;;AAIA,SAASC,cAAT,CAAwBC,gBAAxB,EAA0C;AACtC,SAAOA,gBAAgB,CAACC,WAAjB,IAAgCD,gBAAgB,CAACE,IAAjD,IAAyD,WAAhE;AACD;;AAED,OAAO,SAASC,eAAT,CAAyBH,gBAAzB,EAA2CI,OAA3C,EAAoD;AAAA;;AACzD,0BAAO,cAAcP,SAAd,CAAwB;AAAA;AAAA;AAAA,WAG7BQ,KAH6B,GAGrB;AACNC,QAAAA,cAAc,EAAE;AADV,OAHqB;;AAAA,WA+B7BC,gBA/B6B,GA+BV,CAACC,GAAD,EAAKC,UAAL,KAAkB;AACjC,YAAID,GAAG,KAAKJ,OAAZ,EAAqB;AACjB,eAAKM,QAAL,CAAc;AACVJ,YAAAA,cAAc,EAACG;AADL,WAAd;AAOH;AACJ,OAzC4B;AAAA;;AAO7BE,IAAAA,iBAAiB,GAAG;AACnB,WAAKC,kBAAL,GAAyBd,KAAK,CAACe,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAA+BD,OAAO,IAAI;AAChE,aAAKP,gBAAL,CAAsBO,OAAO,CAACN,GAA9B,EAAmC,IAAnC;AACA,eAAOM,OAAP;AACD,OAHuB,CAAzB;AAMA,WAAKE,mBAAL,GAA0BlB,KAAK,CAACe,YAAN,CAAmBI,QAAnB,CAA4BF,GAA5B,CAAiCE,QAAQ,IAAI;AAClE,aAAKV,gBAAL,CAAsBU,QAAQ,CAACC,MAAT,CAAgBV,GAAtC,EAA0C,KAA1C;AACA,eAAOS,QAAP;AACH,OAHwB,EAIpBE,KAAK,IAAG;AACJ,aAAKZ,gBAAL,CAAsBY,KAAK,CAACD,MAAN,CAAaV,GAAnC,EAAuC,KAAvC;AACA,cAAMW,KAAN;AACC,OAPe,CAA1B;AASA;;AAEDC,IAAAA,oBAAoB,GAAE;AACpBtB,MAAAA,KAAK,CAACe,YAAN,CAAmBC,OAAnB,CAA2BO,KAA3B,CAAiC,KAAKT,kBAAtC;AACAd,MAAAA,KAAK,CAACe,YAAN,CAAmBI,QAAnB,CAA4BI,KAA5B,CAAkC,KAAKL,mBAAvC;AACD;;AAeHM,IAAAA,MAAM,GAAG;AAEL,YAAM;AAAEhB,QAAAA;AAAF,UAAqB,KAAKD,KAAhC;AACA,0BAAO,oBAAC,gBAAD;AAAkB,QAAA,cAAc,EAAEC;AAAlC,SAAsD,KAAKiB,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACH;;AA/C8B,GAA/B,SACStB,WADT,GACwB,eAAcF,cAAc,CAACC,gBAAD,CAAmB,GADvE;AAiDH","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\n\n\nfunction getDisplayName(WrappedComponent) {\n    return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n  }\n  \n  export function withApiProgress(WrappedComponent, apiPath) {\n    return class extends Component {\n      static displayName = `ApiProgress(${getDisplayName(WrappedComponent)})`;\n  \n      state = {\n        pendingApiCall: false\n      };\n\n      componentDidMount() {\n       this.requestInterceptor= axios.interceptors.request.use(request => {\n          this.updateApiCallFor(request.url, true);\n          return request;\n        });\n\n       \n       this.responseInterceptor= axios.interceptors.response.use( response => {\n            this.updateApiCallFor(response.config.url,false);\n            return response;\n        },\n             error =>{         \n                 this.updateApiCallFor(error.config.url,false);\n                 throw error;\n                 }\n                 );\n      }\n\n      componentWillUnmount(){\n        axios.interceptors.request.eject(this.requestInterceptor);\n        axios.interceptors.response.eject(this.responseInterceptor);\n      }\n\n\n      updateApiCallFor = (url,inProgress)=>{\n          if (url === apiPath) {\n              this.setState({\n                  pendingApiCall:inProgress\n              });\n\n         \n\n\n          }\n      };\n\n    render() {\n\n        const { pendingApiCall } = this.state;\n        return <WrappedComponent pendingApiCall={pendingApiCall} {...this.props} />;\n    }\n}\n}\n"]},"metadata":{},"sourceType":"module"}